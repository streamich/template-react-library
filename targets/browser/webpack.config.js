const webpack = require('webpack');
const path = require('path');
const ManifestPlugin = require('webpack-manifest-plugin');
const WebpackPwaManifest = require('webpack-pwa-manifest');

const DEV = process.env.NODE_ENV !== 'production';
const BUILD_NUM = process.env.CIRCLE_BUILD_NUM;

const plugins = [
  // Global variables.
  new webpack.DefinePlugin({
    __DEV__: JSON.stringify(DEV),
    'process.env': {
      BUILD_NUM: JSON.stringify(BUILD_NUM),
      NODE_ENV: JSON.stringify(process.env.NODE_ENV || 'development'),
    },
  }),

  // List of all files generated by Webpack.
  new ManifestPlugin({
    fileName: 'files.json',
  }),

  // PWA manifest file.
  new WebpackPwaManifest({
    inject: false,
    fingerprints: false,
    name: 'My Project',
    short_name: 'My project',
    description: 'My project app!',
    background_color: '#ffffff',
  }),
];

if (process.env.ANALYZER) {
  plugins.push(new (require('webpack-bundle-analyzer')).BundleAnalyzerPlugin());
}

module.exports = {
  devtool: DEV ? 'source-map' : false,
  mode: DEV ? 'development' : 'production',
  entry: {
    index: path.join(__dirname, 'index.tsx'),
  },
  output: {
    filename: '[name].js',
    chunkFilename: '[name].js',
    path: path.join(__dirname, '..', '..', 'public', 'dist'),
    publicPath: '/dist/',
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.jsx'],
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: ['ts-loader'],
      },
    ],
  },
  plugins,
  devServer: {
    contentBase: path.join(__dirname, '..', '..', 'public'),
    publicPath: '/dist/',
    host: '127.0.0.1',
    inline: true,
    watchContentBase: true,
    historyApiFallback: {
      index: 'index.html',
    },
  },
};
